package com.company;

import org.omg.PortableInterceptor.INACTIVE;

import java.lang.reflect.Array;
import java.util.*;


public class Main {

    public static void main(String args[]) {
        String s= "aabc";
        ArrayList<HashMap<Character,Integer>> mapList = new ArrayList<>();
        HashMap<Character, Integer> map = new HashMap<>();
        for(char c = 'a' ; c<='z';c++)
            map.put(c,0);
        for(char c:s.toCharArray()){
            map.put(c,map.get(c)+1);
            HashMap<Character,Integer> tmpMap = new HashMap<>();
            tmpMap.putAll(map);
            mapList.add(tmpMap);
        }
        int dp[]=new int[27];
        for(int i=0;i<s.length();i++){
            for(int j=i;j<s.length();j++){
                if(i==j)
                    dp[1]++;
                else if(i==0){
                    HashMap<Character,Integer> map1 = mapList.get(j);
                    int unqLetters = compare2(map1);
                    for(int ii=1;ii<=unqLetters;ii++)
                        dp[ii]++;

                }
                else {
                    HashMap<Character, Integer> map1 = mapList.get(i-1);
                    HashMap<Character,Integer> map2 = mapList.get(j);
                    int unqLetters = compare(map1,map2);
                    for(int ii=1;ii<=unqLetters;ii++)
                        dp[ii]++;
                }
            }
        }

        for(int i=1;i<=26;i++)
            System.out.print(dp[i]+" ");

    }

    private static int compare2(HashMap<Character, Integer> map1) {
        int count = 0;
        for(char c = 'a' ; c<='z';c++){
            int k1 = map1.get(c);
            if(k1>0)
                count++;

        }
        return count;
    }

    private static int compare(HashMap<Character, Integer> map1, HashMap<Character, Integer> map2) {
        int count = 0;
        for(char c = 'a' ; c<='z';c++){
            int k1 = map1.get(c);
            int k2 = map2.get(c);
            int k3 = Math.abs(k2-k1);
            if(k3>0)
                count++;

        }
        return count;
    }


}


